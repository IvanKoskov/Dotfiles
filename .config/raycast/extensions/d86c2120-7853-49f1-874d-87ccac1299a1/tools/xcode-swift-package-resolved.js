"use strict";var x=Object.create;var p=Object.defineProperty;var w=Object.getOwnPropertyDescriptor;var P=Object.getOwnPropertyNames;var h=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var j=(t,e)=>{for(var o in e)p(t,o,{get:e[o],enumerable:!0})},d=(t,e,o,i)=>{if(e&&typeof e=="object"||typeof e=="function")for(let s of P(e))!u.call(t,s)&&s!==o&&p(t,s,{get:()=>e[s],enumerable:!(i=w(e,s))||i.enumerable});return t};var f=(t,e,o)=>(o=t!=null?x(h(t)):{},d(e||!t||!t.__esModule?p(o,"default",{value:t,enumerable:!0}):o,t)),A=t=>d(p({},"__esModule",{value:!0}),t);var F={};j(F,{default:()=>R});module.exports=A(F);var a=f(require("fs")),c=t=>a.default.promises.access(t,a.default.constants.F_OK).then(()=>!0).catch(()=>!1),l=a.default.promises.readdir,S=a.default.promises.mkdir,b=a.default.promises.rm,g=a.default.promises.readFile,E=a.default.promises.writeFile,L=a.default.promises.rm;var n=f(require("path"));var k=require("child_process"),v=require("util"),y=(0,v.promisify)(k.exec);var m=class t{static async getPackageResolved(e){let o=await t.findPackageResolvedPath(e),i=JSON.parse(await g(o,"utf-8")),s=i.pins??i.object?.pins;if(!s)throw Error("Invalid Package.resolved contents");return{path:o,entries:s.map(r=>({name:r.identity??r.package,location:r.location??r.repositoryURL,branch:r.state?.branch,revision:r.state?.revision,version:r.state?.version}))}}static getLatestVersion(e){return y([`git ls-remote --tags --refs --sort="v:refname" ${e.location}`,"tail -n1","sed 's/.*\\///'"].join(" | ")).then(o=>o.stdout.trim())}static async findPackageResolvedPath(e){if(await c(n.default.join(e,"Package.resolved")))return n.default.join(e,"Package.resolved");let o=await l(e),i=o.find(r=>r.endsWith(".xcodeproj"));if(i){let r=n.default.join(e,i,"project.xcworkspace/xcshareddata/swiftpm/Package.resolved");if(await c(r))return r}let s=o.find(r=>r.endsWith(".xcworkspace"));if(s){let r=n.default.join(e,s,"xcshareddata/swiftpm/Package.resolved");if(await c(r))return r}if(await c(n.default.join(e,".package.resolved")))return n.default.join(e,".package.resolved");throw Error("No Package.resolved has been found")}};var R=t=>m.getPackageResolved(t.xcodeProjectDirectoryPath);
