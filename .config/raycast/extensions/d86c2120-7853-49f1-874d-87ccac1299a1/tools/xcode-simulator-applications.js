"use strict";var N=Object.create;var m=Object.defineProperty;var G=Object.getOwnPropertyDescriptor;var k=Object.getOwnPropertyNames;var M=Object.getPrototypeOf,V=Object.prototype.hasOwnProperty;var U=(o,t)=>{for(var i in t)m(o,i,{get:t[i],enumerable:!0})},v=(o,t,i,e)=>{if(t&&typeof t=="object"||typeof t=="function")for(let r of k(t))!V.call(o,r)&&r!==i&&m(o,r,{get:()=>t[r],enumerable:!(e=G(t,r))||e.enumerable});return o};var X=(o,t,i)=>(i=o!=null?N(M(o)):{},v(t||!o||!o.__esModule?m(i,"default",{value:o,enumerable:!0}):i,o)),K=o=>v(m({},"__esModule",{value:!0}),o);var J={};U(J,{default:()=>O});module.exports=K(J);var b=require("child_process"),$=require("util"),n=(0,$.promisify)(b.exec);function h(o,t){let i=new Map;for(let e of o){let r=t(e),a=i.get(r);a?a.push(e):i.set(r,[e])}return Array.from(i.keys()).map(e=>({key:e,values:i.get(e)??[]}))}var j=require("@raycast/api"),f=class o{static get bundleIdentifier(){return"com.apple.dt.Xcode"}static get downloadUrl(){return"https://apps.apple.com/app/id497799835"}static get developerDocumentationURLScheme(){return"x-xcode-documentation://"}static async isXcodeInstalled(){return!!(await(0,j.getApplications)()).find(i=>i.bundleId===o.bundleIdentifier)}static async isXcodeRunning(){try{return(await n("pgrep Xcode")).stdout.trim().length!==0}catch{return!1}}static launchXcode(){return n([`open -j -b ${o.bundleIdentifier}`,"sleep 2"].join(" && ")).then()}};var l=class extends Error{constructor(i){super(i);this.reason=i}};var P=class o{static launchSimulatorApplication(){return n('open -b "com.apple.iphonesimulator"').then()}static async xcodeSimulatorGroups(t){let i=await o.xcodeSimulators();return h(i.filter(e=>t==="All"||e.state===t),e=>e.runtime).map(e=>({runtime:e.key,simulators:e.values})).sort((e,r)=>e.runtime.localeCompare(r.runtime))}static async xcodeSimulators(){let t=await n("xcrun simctl list -j -v devices"),i=JSON.parse(t.stdout);if(!i||!i.devices)throw[];let e=[];for(let r in i.devices){let a=r.substring(r.lastIndexOf(".")+1).split("-"),c=[a.shift(),a.join(".")].join(" ");e.push(...i.devices[r].map(d=>(d.runtime=c,d)))}return e}static boot(t){return n(`xcrun simctl boot ${t}`).then(()=>{o.launchSimulatorApplication()})}static shutdown(t){return n(`xcrun simctl shutdown ${t}`).then()}static toggle(t){switch(t.state){case"Booted":return o.shutdown(t.udid);case"Shutting Down":return Promise.resolve();case"Shutdown":return o.boot(t.udid)}}static async restart(t){await o.shutdown(t),await o.boot(t)}static async app(t,i,e){try{await o.boot(e.udid)}catch{}return n(["xcrun","simctl",t,e.udid,i].join(" ")).then()}static async appPrivacy(t,i,e,r){try{await o.boot(r.udid)}catch{}return n(["xcrun","simctl","privacy",r.udid,t,i,e].join(" ")).then()}static isValidUrl(t){return/\w+:\/\/+/.test(t)}static async openUrl(t,i){let e=t.trim();if(!o.isValidUrl(e))throw new l("Bad Url");if(!i){if(!await f.isXcodeInstalled())throw new l("Xcode is not installed");if(!(await o.xcodeSimulators()).some(a=>a.state==="Booted"))throw new l("No simulator booted")}return n(["xcrun","simctl","openurl",i??"booted",`"${e}"`].join(" ")).then(()=>{o.launchSimulatorApplication()})}static async sendPushNotification(t,i,e){return n(`xcrun simctl push ${t.udid} ${i} ${e}`).then()}static async deleteAppFiles(t,i){let e=i?n(`rm -rf ${i}`):Promise.resolve();return Promise.all([n(`rm -rf ${t}`),e]).then()}static async rename(t,i){return n(`xcrun simctl rename ${t.udid} '${i}' `).then()}static async delete(t){return n(`xcrun simctl delete ${t.udid}`).then()}static async triggerIcloudSync(t){return n(`xcrun simctl icloud_sync ${t.udid}`).then()}};var p=X(require("fs")),B=o=>p.default.promises.access(o,p.default.constants.F_OK).then(()=>!0).catch(()=>!1),y=p.default.promises.readdir,nt=p.default.promises.mkdir,st=p.default.promises.rm,ct=p.default.promises.readFile,pt=p.default.promises.writeFile,lt=p.default.promises.rm;var s=X(require("path"));var S=class o{static{this.simulatorSandBoxPathsCache=new Map}static{this.simulatorAppGroupPathsCache=new Map}static async xcodeSimulatorApplicationGroups(){let t=await o.xcodeSimulatorApplications();return h(t,i=>i.simulator).map(i=>({simulator:i.key,applications:i.values.sort((e,r)=>e.name.localeCompare(r.name))}))}static async xcodeSimulatorApplications(){let t=await P.xcodeSimulators();return[].concat(...(await Promise.allSettled(t.map(o.findXcodeSimulatorApplications))).map(i=>i.status==="fulfilled"?i.value:[]))}static async findXcodeSimulatorApplications(t){let i=s.join(t.dataPath,"Containers/Bundle/Application"),e;try{e=await y(i,{withFileTypes:!0}).then(a=>a.filter(c=>c.isDirectory()).map(c=>s.join(i,c.name)))}catch{return[]}return(await Promise.allSettled(e.map(a=>o.findXcodeSimulatorApplication(t,a)))).map(a=>a.status==="fulfilled"?a.value:void 0).filter(Boolean)}static async findXcodeSimulatorApplication(t,i){let e;try{let u=(await y(i)).find(g=>g.endsWith(".app"));if(!u)return;e=u}catch{return}let r;try{r=JSON.parse((await n(["plutil","-convert","json",s.join(i,e.replace(" ","\\ "),"Info.plist"),"-o","-"].join(" "))).stdout.trim())}catch{return}let a=r.CFBundleIdentifier?.trim();if(!a)return;let c=await o.findSandboxDirectoryPath(t,a);if(!c)return;let d=await o.findAppGroupDirectoryPath(t,a),C=r.CFBundleShortVersionString,F=r.CFBundleVersion,I=r.CFBundleDisplayName??r.CFBundleName??e.split(".")[0],w=r.CFBundleIcons?.CFBundlePrimaryIcon?.CFBundleIconFiles?.at(0),x;if(w)try{let u=(await y(s.join(i,e))).find(g=>g.startsWith(w));u&&(x=s.join(i,e,u))}catch{}let A=s.join(c,"Library","Preferences",`${a}.plist`);return await B(A)||(A=void 0),{id:[t.udid,a].join("/"),name:I,bundleIdentifier:a,version:C,buildNumber:F,appIconPath:x,simulator:t,bundlePath:i,sandBoxPath:c,sandBoxDocumentsPath:s.join(c,"Documents"),sandBoxCachesPath:s.join(c,"Library","Caches"),appGroupPath:d,userDefaultsPlistPath:A}}static async findSandboxDirectoryPath(t,i){if(t.state==="Booted")try{return(await n(`xcrun simctl get_app_container ${t.udid} ${i} data`)).stdout.trim()}catch{}let e=o.simulatorSandBoxPathsCache.get(t);if(!e){let r=s.join(t.dataPath,"Containers/Data/Application");e=this.getApplicationPathFromDirectory(r),o.simulatorSandBoxPathsCache.set(t,e)}return(await e)?.find(r=>r.bundleIdentifier===i)?.path}static async findAppGroupDirectoryPath(t,i){if(t.state==="Booted")try{let r=(await n(`xcrun simctl get_app_container ${t.udid} ${i} groups`)).stdout.trim();if(r.length>0){let a=r.split("	");if(a.length===2)return a[1].replaceAll(`
`,"")}}catch{}let e=o.simulatorAppGroupPathsCache.get(t);if(!e){let r=s.join(t.dataPath,"Containers/Shared/AppGroup");e=o.getApplicationPathFromDirectory(r),o.simulatorAppGroupPathsCache.set(t,e)}return(await e)?.find(r=>r.bundleIdentifier===`group.${i}`)?.path}static async getApplicationPathFromDirectory(t){return n([`ls -l ${t}`,`awk '{print $6 "-" $7 "-" $8 " " $9}'`,"awk '!seen[$1]++'",`awk '{$1=""; print $0}'`].join(" | ")).then(i=>i.stdout.trim().split(`
`).map(e=>s.join(t,e.trim()))).then(i=>Promise.allSettled(i.map(e=>n(["defaults","read",s.join(e,".com.apple.mobile_container_manager.metadata.plist"),"MCMMetadataIdentifier"].join(" ")).then(r=>{let a=r.stdout.trim();if(a)return{bundleIdentifier:a,path:e}}))).then(e=>e.map(r=>r.status=="fulfilled"?r.value:void 0).filter(Boolean)))}};var O=()=>S.xcodeSimulatorApplications();
