{
  "version": 3,
  "sources": ["../../node_modules/untildify/index.js", "../../src/tools/clear-derived-data.ts", "../../src/shared/exec-async.ts", "../../src/shared/run-apple-script.ts", "../../src/shared/fs-async.ts", "../../src/services/xcode-cleanup.service.ts"],
  "sourcesContent": ["'use strict';\nconst os = require('os');\n\nconst homeDirectory = os.homedir();\n\nmodule.exports = pathWithTilde => {\n\tif (typeof pathWithTilde !== 'string') {\n\t\tthrow new TypeError(`Expected a string, got ${typeof pathWithTilde}`);\n\t}\n\n\treturn homeDirectory ? pathWithTilde.replace(/^~(?=$|\\/|\\\\)/, homeDirectory) : pathWithTilde;\n};\n", "import { Action, Tool } from \"@raycast/api\";\nimport { XcodeCleanupService } from \"../services/xcode-cleanup.service\";\n\nexport const confirmation: Tool.Confirmation<never> = async () => {\n  return {\n    style: Action.Style.Destructive,\n    message: \"Are you sure you want to clear the derived data directory?\",\n  };\n};\n\n/**\n * Clears the derived data directory.\n */\nexport default () => XcodeCleanupService.clearDerivedData();\n", "import { exec } from \"child_process\";\nimport { promisify } from \"util\";\n\n/**\n * Spawns a shell then executes the command within that shell, buffering any generated output.\n */\nexport const execAsync = promisify(exec);\n", "import { execAsync } from \"./exec-async\";\n\n/**\n * Run AppleScript\n * @param appleScript The AppleScript either an inline string or an array of lines\n */\nexport function runAppleScript(appleScript: string | string[]): Promise<string> {\n  // Declare parameters\n  let parameters: string;\n  // Check if AppleScript is an array\n  if (Array.isArray(appleScript)) {\n    // Map each line with a separate \"-e\" flag\n    parameters = appleScript.map((line) => `-e '${line}'`).join(\" \");\n  } else {\n    // Use inline AppleScript\n    parameters = `-e '${appleScript}'`;\n  }\n  // Execute osascript with parameters\n  return execAsync(`osascript ${parameters}`).then((output) => output.stdout);\n}\n", "import fs from \"fs\";\nimport { PathLike } from \"node:fs\";\n\n/**\n * Exists\n */\nexport const existsAsync = (path: PathLike) => {\n  return fs.promises\n    .access(path, fs.constants.F_OK)\n    .then(() => true)\n    .catch(() => false);\n};\n\n/**\n * Read directory\n */\nexport const readDirectoryAsync = fs.promises.readdir;\n\n/**\n * Make directory\n */\nexport const makeDirectoryAsync = fs.promises.mkdir;\n\n/**\n * Remove directory\n */\nexport const removeDirectoryAsync = fs.promises.rm;\n\n/**\n * Read file\n */\nexport const readFileAsync = fs.promises.readFile;\n\n/**\n * Write file\n */\nexport const writeFileAsync = fs.promises.writeFile;\n\n/**\n * Delete file\n */\nexport const deleteFileAsync = fs.promises.rm;\n", "import { execAsync } from \"../shared/exec-async\";\nimport { runAppleScript } from \"../shared/run-apple-script\";\nimport { readDirectoryAsync } from \"../shared/fs-async\";\nimport Path from \"path\";\nimport untildify from \"untildify\";\n\n/**\n * XcodeCleanupService\n */\nexport class XcodeCleanupService {\n  /**\n   * Clear the Xcode Derived Data directory\n   */\n  static clearDerivedData(): Promise<void> {\n    return runAppleScript([\n      'set dd to (path to home folder as string) & \"Library:Developer:Xcode:DerivedData\"',\n      'tell application \"Finder\"',\n      \"if dd exists then\",\n      \"move dd to trash\",\n      \"end if\",\n      \"end tell\",\n    ]).then();\n  }\n\n  /**\n   * Remove Derived Data directory for a given app\n   * @param appName The name of the app\n   */\n  static removeDerivedData(appName: string): Promise<void> {\n    const derivedDataPath = untildify(\"~/Library/Developer/Xcode/DerivedData\");\n    return readDirectoryAsync(derivedDataPath).then((directories) => {\n      const directory = directories.find((directory) => directory.split(\"-\").slice(0, -1).join(\"-\") === appName);\n      if (!directory) {\n        return Promise.resolve();\n      }\n      return runAppleScript(\n        `tell application \"Finder\" to delete POSIX file \"${Path.join(derivedDataPath, directory)}\"`\n      ).then();\n    });\n  }\n\n  /**\n   * Clear Swift Package Manager Cache\n   */\n  static clearSwiftPackageManagerCache(): Promise<void> {\n    return execAsync(\"rm -rf ~/Library/org.swift.swiftpm && rm -rf ~/Library/Caches/org.swift.swiftpm\").then();\n  }\n\n  /**\n   * Clear SwiftUI Previews Cache\n   */\n  static clearSwiftUIPreviewsCache(): Promise<void> {\n    return execAsync(\"rm -rf ~/Library/Developer/Xcode/UserData/Previews\").then();\n  }\n\n  /**\n   * Delete unsupported Simulators\n   */\n  static deleteUnsupportedSimulators(): Promise<void> {\n    return execAsync(\"xcrun simctl delete unavailable\").then();\n  }\n}\n"],
  "mappings": "onBAAA,IAAAA,EAAAC,EAAA,CAAAC,EAAAC,IAAA,cACA,IAAMC,EAAK,QAAQ,IAAI,EAEjBC,EAAgBD,EAAG,QAAQ,EAEjCD,EAAO,QAAUG,GAAiB,CACjC,GAAI,OAAOA,GAAkB,SAC5B,MAAM,IAAI,UAAU,0BAA0B,OAAOA,CAAa,EAAE,EAGrE,OAAOD,EAAgBC,EAAc,QAAQ,gBAAiBD,CAAa,EAAIC,CAChF,ICXA,IAAAC,EAAA,GAAAC,EAAAD,EAAA,kBAAAE,EAAA,YAAAC,IAAA,eAAAC,EAAAJ,GAAA,IAAAK,EAA6B,wBCA7B,IAAAC,EAAqB,yBACrBC,EAA0B,gBAKbC,KAAY,aAAU,MAAI,ECAhC,SAASC,EAAeC,EAAiD,CAE9E,IAAIC,EAEJ,OAAI,MAAM,QAAQD,CAAW,EAE3BC,EAAaD,EAAY,IAAKE,GAAS,OAAOA,CAAI,GAAG,EAAE,KAAK,GAAG,EAG/DD,EAAa,OAAOD,CAAW,IAG1BG,EAAU,aAAaF,CAAU,EAAE,EAAE,KAAMG,GAAWA,EAAO,MAAM,CAC5E,CCnBA,IAAAC,EAAe,iBAgBR,IAAMC,EAAqB,EAAAC,QAAG,SAAS,QAKjCC,EAAqB,EAAAD,QAAG,SAAS,MAKjCE,EAAuB,EAAAF,QAAG,SAAS,GAKnCG,EAAgB,EAAAH,QAAG,SAAS,SAK5BI,EAAiB,EAAAJ,QAAG,SAAS,UAK7BK,EAAkB,EAAAL,QAAG,SAAS,GCtC3C,IAAAM,EAAiB,mBACjBC,EAAsB,OAKTC,EAAN,KAA0B,CAI/B,OAAO,kBAAkC,CACvC,OAAOC,EAAe,CACpB,oFACA,4BACA,oBACA,mBACA,SACA,UACF,CAAC,EAAE,KAAK,CACV,CAMA,OAAO,kBAAkBC,EAAgC,CACvD,IAAMC,KAAkB,EAAAC,SAAU,uCAAuC,EACzE,OAAOC,EAAmBF,CAAe,EAAE,KAAMG,GAAgB,CAC/D,IAAMC,EAAYD,EAAY,KAAMC,GAAcA,EAAU,MAAM,GAAG,EAAE,MAAM,EAAG,EAAE,EAAE,KAAK,GAAG,IAAML,CAAO,EACzG,OAAKK,EAGEN,EACL,mDAAmD,EAAAO,QAAK,KAAKL,EAAiBI,CAAS,CAAC,GAC1F,EAAE,KAAK,EAJE,QAAQ,QAAQ,CAK3B,CAAC,CACH,CAKA,OAAO,+BAA+C,CACpD,OAAOE,EAAU,iFAAiF,EAAE,KAAK,CAC3G,CAKA,OAAO,2BAA2C,CAChD,OAAOA,EAAU,oDAAoD,EAAE,KAAK,CAC9E,CAKA,OAAO,6BAA6C,CAClD,OAAOA,EAAU,iCAAiC,EAAE,KAAK,CAC3D,CACF,EJ1DO,IAAMC,EAAyC,UAC7C,CACL,MAAO,SAAO,MAAM,YACpB,QAAS,4DACX,GAMKC,EAAQ,IAAMC,EAAoB,iBAAiB",
  "names": ["require_untildify", "__commonJSMin", "exports", "module", "os", "homeDirectory", "pathWithTilde", "clear_derived_data_exports", "__export", "confirmation", "clear_derived_data_default", "__toCommonJS", "import_api", "import_child_process", "import_util", "execAsync", "runAppleScript", "appleScript", "parameters", "line", "execAsync", "output", "import_fs", "readDirectoryAsync", "fs", "makeDirectoryAsync", "removeDirectoryAsync", "readFileAsync", "writeFileAsync", "deleteFileAsync", "import_path", "import_untildify", "XcodeCleanupService", "runAppleScript", "appName", "derivedDataPath", "untildify", "readDirectoryAsync", "directories", "directory", "Path", "execAsync", "confirmation", "clear_derived_data_default", "XcodeCleanupService"]
}
