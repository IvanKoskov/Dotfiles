{
  "version": 3,
  "sources": ["../../node_modules/untildify/index.js", "../../src/tools/xcode-projects.ts", "../../src/shared/exec-async.ts", "../../src/services/xcode-project.service.ts", "../../src/shared/preferences.ts"],
  "sourcesContent": ["'use strict';\nconst os = require('os');\n\nconst homeDirectory = os.homedir();\n\nmodule.exports = pathWithTilde => {\n\tif (typeof pathWithTilde !== 'string') {\n\t\tthrow new TypeError(`Expected a string, got ${typeof pathWithTilde}`);\n\t}\n\n\treturn homeDirectory ? pathWithTilde.replace(/^~(?=$|\\/|\\\\)/, homeDirectory) : pathWithTilde;\n};\n", "import { XcodeProjectService } from \"../services/xcode-project.service\";\nimport { XcodeProjectType } from \"../models/xcode-project/xcode-project-type.model\";\n\ntype Input = {\n  /**\n   * The filter to apply to only return Xcode projects of a certain type.\n   */\n  filter?: XcodeProjectType;\n  /**\n   * The number of Xcode projects to return.\n   */\n  limit?: number;\n};\n\n/**\n * Returns the Xcode projects.\n * @param input The input.\n */\nexport default async (input: Input) => {\n  let xcodeProjects = await XcodeProjectService.xcodeProjects();\n  if (input.filter) {\n    xcodeProjects = xcodeProjects.filter((xcodeProject) => xcodeProject.type === input.filter);\n  }\n  if (input.limit && input.limit > 0) {\n    xcodeProjects = xcodeProjects.slice(0, input.limit);\n  }\n  return xcodeProjects;\n};\n", "import { exec } from \"child_process\";\nimport { promisify } from \"util\";\n\n/**\n * Spawns a shell then executes the command within that shell, buffering any generated output.\n */\nexport const execAsync = promisify(exec);\n", "import { XcodeProject } from \"../models/xcode-project/xcode-project.model\";\nimport { XcodeProjectType } from \"../models/xcode-project/xcode-project-type.model\";\nimport { execAsync } from \"../shared/exec-async\";\nimport untildify from \"untildify\";\nimport * as Path from \"path\";\nimport { searchRecentProjectsCommandPreferences } from \"../shared/preferences\";\n\n/**\n * XcodeProjectService\n */\nexport class XcodeProjectService {\n  /**\n   * Returns the Xcode projects.\n   */\n  static async xcodeProjects(): Promise<XcodeProject[]> {\n    // Initialize the Spotlight search patterns\n    const spotlightSearchPatterns = [\n      \"kMDItemDisplayName == *.xcodeproj\",\n      \"kMDItemDisplayName == *.xcworkspace\",\n      \"kMDItemDisplayName == Package.swift\",\n      \"kMDItemDisplayName == *.playground\",\n    ];\n    // Execute spotlight query\n    const spotlightQueryOutput = await execAsync(\n      `mdfind -attr kMDItemLastUsedDate '${spotlightSearchPatterns.join(\" || \")}'`\n    );\n    // Retrieve the excluded Xcode Project Paths\n    const excludedXcodeProjectPaths = XcodeProjectService.excludedXcodeProjectPaths();\n    // Initialize regular expression\n    const regularExpression = /^(.*?)\\s+kMDItemLastUsedDate\\s+=\\s+(.*)$/;\n    // Initialize Xcode project array\n    const xcodeProjects: XcodeProject[] = [];\n    // For each raw line of spotlight query output\n    for (const rawLine of spotlightQueryOutput.stdout.trim().split(\"\\n\")) {\n      // Trim the raw line\n      const line = rawLine.trim();\n      // Check if line is empty\n      if (!line) {\n        // Continue with next line\n        continue;\n      }\n      // Declare path and last used date\n      let path: string;\n      let lastUsed: Date | undefined;\n      // Perform regular expression\n      const match = line.match(regularExpression);\n      // Check if regular expression has two matches\n      if (match && match.length > 2) {\n        // Initialize path with first component of match\n        path = match[1].trim();\n        // Initialize last used date with second component of match\n        const lastUsedDateString = match[2].trim();\n        // Check if last used date string is not null\n        if (lastUsedDateString !== \"(null)\") {\n          // Initialize date from string\n          const date = new Date(lastUsedDateString);\n          // Initialize last used date\n          lastUsed = isNaN(date.getTime()) ? undefined : date;\n        }\n      } else {\n        // Otherwise use the line as path\n        path = line;\n      }\n      // Check if path is excluded\n      if (\n        path.includes(\"/Carthage/Checkouts\") ||\n        path.includes(\"/Pods/\") ||\n        path.includes(\"/Library/Autosave Information\") ||\n        excludedXcodeProjectPaths.some((excludedPath) => path.startsWith(excludedPath))\n      ) {\n        // Continue with next line\n        continue;\n      }\n      // Decode Xcode project\n      const xcodeProject = XcodeProjectService.decodeXcodeProject(path, lastUsed);\n      // Check if Xcode project could not be decoded from path\n      if (!xcodeProject) {\n        // Continue with next line\n        continue;\n      }\n      // Append Xcode project\n      xcodeProjects.push(xcodeProject);\n    }\n    // Sort Xcode projects by lastUsedDate (descending order).\n    xcodeProjects.sort((lhs, rhs) => (rhs.lastUsed?.getTime() ?? 0) - (lhs.lastUsed?.getTime() ?? 0));\n    // Return xcode projects\n    return xcodeProjects;\n  }\n\n  /**\n   * Retrieve the excluded Xcode Project paths\n   * which are configured via the Raycast Preferences\n   */\n  private static excludedXcodeProjectPaths(): string[] {\n    // Retrieve the excluded Xcode Project paths string from preference values\n    const excludedXcodeProjectPathsString = searchRecentProjectsCommandPreferences.excludedXcodeProjectPaths;\n    // Check if excluded Xcode Project path string is falsy\n    if (!excludedXcodeProjectPathsString) {\n      // Return an empty array\n      return [];\n    }\n    // Return excluded Xcode Project paths\n    return (\n      excludedXcodeProjectPathsString\n        // Split by comma\n        .split(\",\")\n        // Trim each path\n        .map((path) => path.trim())\n        // Untildify each path\n        .map((path) => untildify(path))\n    );\n  }\n\n  /**\n   * Decode XcodeProject from Xcode Project Path\n   * @param xcodeProjectPath The Xcode Project Path\n   * @param lastUsed The date when the project was last used or opened\n   */\n  private static decodeXcodeProject(xcodeProjectPath: string, lastUsed?: Date): XcodeProject | undefined {\n    // Initialize the last path component\n    const lastPathComponent = xcodeProjectPath.substring(xcodeProjectPath.lastIndexOf(\"/\") + 1);\n    // Initialize the file extension\n    const fileExtension = lastPathComponent.split(\".\").at(-1);\n    // Declare name\n    let name: string;\n    // Switch on file extension\n    switch (fileExtension) {\n      case XcodeProjectType.project:\n      case XcodeProjectType.workspace:\n      case XcodeProjectType.swiftPlayground: {\n        // Initialize file name components\n        const fileNameComponent = lastPathComponent.split(\".\");\n        // Pop last file name component\n        fileNameComponent.pop();\n        // Initialize name with re-joined file name components\n        name = fileNameComponent.join(\".\");\n        break;\n      }\n      case XcodeProjectType.swiftPackage:\n        // Initialize name by using the parent directory name otherwise use last path component\n        name = xcodeProjectPath.split(\"/\").at(-2) ?? lastPathComponent;\n        break;\n      default:\n        // Unsupported/Unknown project type\n        // Return undefined to exclude project\n        return undefined;\n    }\n    // Initialize keywords\n    let keywords = xcodeProjectPath.split(\"/\");\n    // Pop last element of keywords\n    keywords.pop();\n    // Push name to keywords\n    keywords.push(name);\n    // Filter out duplicates and empty keywords\n    keywords = [...new Set(keywords.filter(Boolean))];\n    // Return XcodeProject\n    return {\n      name: name,\n      type: fileExtension,\n      directoryPath: Path.dirname(xcodeProjectPath),\n      filePath: xcodeProjectPath,\n      lastUsed: lastUsed,\n      keywords: keywords.reverse(),\n    };\n  }\n}\n", "import { getPreferenceValues } from \"@raycast/api\";\n\n/**\n * Preferences\n */\nconst preferences = getPreferenceValues<ExtensionPreferences>();\n\n/**\n * [show-recent-projects-in-menu-bar.command] Preferences\n */\nexport const showRecentProjectsInMenuBarCommandPreferences =\n  preferences as Preferences.ShowRecentProjectsInMenuBarCommand;\n\n/**\n * [search-recent-projects.command] Preferences\n */\nexport const searchRecentProjectsCommandPreferences = preferences as Preferences.SearchRecentProjectsCommand;\n\n/**\n * [create-swift-playground.command] Preferences\n */\nexport const createSwiftPlaygroundCommandPreferences = preferences as Preferences.CreateSwiftPlaygroundCommand;\n"],
  "mappings": "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",
  "names": ["require_untildify", "__commonJSMin", "exports", "module", "os", "homeDirectory", "pathWithTilde", "xcode_projects_exports", "__export", "xcode_projects_default", "__toCommonJS", "import_child_process", "import_util", "execAsync", "import_untildify", "Path", "import_api", "preferences", "searchRecentProjectsCommandPreferences", "preferences", "XcodeProjectService", "_XcodeProjectService", "spotlightQueryOutput", "execAsync", "excludedXcodeProjectPaths", "regularExpression", "xcodeProjects", "rawLine", "line", "path", "lastUsed", "match", "lastUsedDateString", "date", "excludedPath", "xcodeProject", "lhs", "rhs", "excludedXcodeProjectPathsString", "searchRecentProjectsCommandPreferences", "untildify", "xcodeProjectPath", "lastPathComponent", "fileExtension", "name", "fileNameComponent", "keywords", "xcode_projects_default", "input", "xcodeProjects", "XcodeProjectService", "xcodeProject"]
}
