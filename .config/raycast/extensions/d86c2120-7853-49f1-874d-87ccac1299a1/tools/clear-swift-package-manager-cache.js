"use strict";var P=Object.create;var a=Object.defineProperty;var w=Object.getOwnPropertyDescriptor;var F=Object.getOwnPropertyNames;var k=Object.getPrototypeOf,L=Object.prototype.hasOwnProperty;var S=(e,r)=>()=>(r||e((r={exports:{}}).exports,r),r.exports),b=(e,r)=>{for(var t in r)a(e,t,{get:r[t],enumerable:!0})},l=(e,r,t,n)=>{if(r&&typeof r=="object"||typeof r=="function")for(let o of F(r))!L.call(e,o)&&o!==t&&a(e,o,{get:()=>r[o],enumerable:!(n=w(r,o))||n.enumerable});return e};var m=(e,r,t)=>(t=e!=null?P(k(e)):{},l(r||!e||!e.__esModule?a(t,"default",{value:e,enumerable:!0}):t,e)),$=e=>l(a({},"__esModule",{value:!0}),e);var x=S((H,v)=>{"use strict";var C=require("os"),u=C.homedir();v.exports=e=>{if(typeof e!="string")throw new TypeError(`Expected a string, got ${typeof e}`);return u?e.replace(/^~(?=$|\/|\\)/,u):e}});var M={};b(M,{confirmation:()=>X,default:()=>j});module.exports=$(M);var g=require("@raycast/api");var d=require("child_process"),f=require("util"),s=(0,f.promisify)(d.exec);function p(e){let r;return Array.isArray(e)?r=e.map(t=>`-e '${t}'`).join(" "):r=`-e '${e}'`,s(`osascript ${r}`).then(t=>t.stdout)}var i=m(require("fs"));var y=i.default.promises.readdir,q=i.default.promises.mkdir,K=i.default.promises.rm,_=i.default.promises.readFile,z=i.default.promises.writeFile,B=i.default.promises.rm;var h=m(require("path")),D=m(x()),c=class{static clearDerivedData(){return p(['set dd to (path to home folder as string) & "Library:Developer:Xcode:DerivedData"','tell application "Finder"',"if dd exists then","move dd to trash","end if","end tell"]).then()}static removeDerivedData(r){let t=(0,D.default)("~/Library/Developer/Xcode/DerivedData");return y(t).then(n=>{let o=n.find(A=>A.split("-").slice(0,-1).join("-")===r);return o?p(`tell application "Finder" to delete POSIX file "${h.default.join(t,o)}"`).then():Promise.resolve()})}static clearSwiftPackageManagerCache(){return s("rm -rf ~/Library/org.swift.swiftpm && rm -rf ~/Library/Caches/org.swift.swiftpm").then()}static clearSwiftUIPreviewsCache(){return s("rm -rf ~/Library/Developer/Xcode/UserData/Previews").then()}static deleteUnsupportedSimulators(){return s("xcrun simctl delete unavailable").then()}};var X=async()=>({style:g.Action.Style.Destructive,message:"Are you sure you want to clear the Swift Package Manager cache?"}),j=()=>c.clearSwiftPackageManagerCache();0&&(module.exports={confirmation});
